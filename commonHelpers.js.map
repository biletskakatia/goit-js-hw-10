{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\nlet userSelectedDate;\nlet intervalId;\nconst startButton = document.querySelector('[data-start]');\nconst dateTimePicker = document.getElementById('datetime-picker');\nstartButton.disabled = true;\nstartButton.addEventListener('click', () => {\n    updateTimer();\n});\nflatpickr(\"#datetime-picker\", {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose: function(selectedDates) {\n        console.log(selectedDates[0]);\n        userSelectedDate = selectedDates[0];\n        if (userSelectedDate < new Date()) {\n            iziToast.error({\n                title: 'Error',\n                message: 'Please choose a date in the future',\n                position: 'topCenter'\n            });\n        } else {\n          startButton.disabled = false;\n        }\n    }\n});\n\nfunction formatTimeValue(value) {\n    return String(value).padStart(2, '0');\n}\n\nfunction updateTimer() {\n    dateTimePicker.disabled = true;\n    startButton.disabled = true;\n    intervalId = setInterval(() => { \n    const currentTime = new Date().getTime();\n    const remainingTime = userSelectedDate.getTime() - currentTime;\n    \n    if (remainingTime <= 0) {\n    clearInterval(intervalId);\n      dateTimePicker.disabled = false;\n    return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(remainingTime);\n    document.querySelector('[data-days]').textContent = formatTimeValue(days);\n    document.querySelector('[data-hours]').textContent = formatTimeValue(hours);\n    document.querySelector('[data-minutes]').textContent = formatTimeValue(minutes);\n    document.querySelector('[data-seconds]').textContent = formatTimeValue(seconds);\n}, 1000);\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n  // Remaining days\n    const days = Math.floor(ms / day);\n  // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\nreturn { days, hours, minutes, seconds };\n}\n"],"names":["userSelectedDate","intervalId","startButton","dateTimePicker","updateTimer","flatpickr","selectedDates","iziToast","formatTimeValue","value","currentTime","remainingTime","days","hours","minutes","seconds","convertMs","ms"],"mappings":"2GAIA,IAAIA,EACAC,EACJ,MAAMC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAiB,SAAS,eAAe,iBAAiB,EAChED,EAAY,SAAW,GACvBA,EAAY,iBAAiB,QAAS,IAAM,CACxCE,GACJ,CAAC,EACDC,EAAU,mBAAoB,CAC1B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAS,SAASC,EAAe,CAC7B,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5BN,EAAmBM,EAAc,CAAC,EAC9BN,EAAmB,IAAI,KACvBO,EAAS,MAAM,CACX,MAAO,QACP,QAAS,qCACT,SAAU,WAC1B,CAAa,EAEHL,EAAY,SAAW,EAE5B,CACL,CAAC,EAED,SAASM,EAAgBC,EAAO,CAC5B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAEA,SAASL,GAAc,CACnBD,EAAe,SAAW,GAC1BD,EAAY,SAAW,GACvBD,EAAa,YAAY,IAAM,CAC/B,MAAMS,EAAc,IAAI,KAAM,EAAC,QAAO,EAChCC,EAAgBX,EAAiB,QAAO,EAAKU,EAEnD,GAAIC,GAAiB,EAAG,CACxB,cAAcV,CAAU,EACtBE,EAAe,SAAW,GAC5B,MACC,CAED,KAAM,CAAE,KAAAS,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAa,EACjE,SAAS,cAAc,aAAa,EAAE,YAAcH,EAAgBI,CAAI,EACxE,SAAS,cAAc,cAAc,EAAE,YAAcJ,EAAgBK,CAAK,EAC1E,SAAS,cAAc,gBAAgB,EAAE,YAAcL,EAAgBM,CAAO,EAC9E,SAAS,cAAc,gBAAgB,EAAE,YAAcN,EAAgBO,CAAO,CAClF,EAAG,GAAI,CACP,CAEA,SAASC,EAAUC,EAAI,CAQnB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAE1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EAEpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EAEjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EACtE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACtC"}